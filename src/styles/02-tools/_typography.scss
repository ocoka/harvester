// stealed from angular material
// Outputs the shorthand `font` CSS property, based on a set of typography values. Falls back to
// the individual properties if a value that isn't allowed in the shorthand is passed in.
@mixin mixShortHand($font-size, $font-weight, $line-height, $font-family) {
  // If any of the values are set to `inherit`, we can't use the shorthand
  // so we fall back to passing in the individual properties.
  @if ($font-size == inherit or
       $font-weight == inherit or
       $line-height == inherit or
       $font-family == inherit or
       $font-size == null or
       $font-weight == null or
       $line-height == null or
       $font-family == null) {

    font-size: sizeToFont($font-size);
    font-weight: $font-weight;
    line-height: $line-height;
    font-family: $font-family;
  }
  @else {
    // Otherwise use the shorthand `font`, because it's the least amount of bytes. Note
    // that we need to use interpolation for `font-size/line-height` in order to prevent
    // Sass from dividing the two values.
    font: $font-weight #{sizeToFont($font-size)}/#{$line-height} $font-family;
  }
}

// Converts a typography level into CSS styles.
@mixin mixTypography($level) {

  /* mixTypography($level: #{$level}) */
  $font-size: _a(#{$level}-font-size);
  $font-weight: _a(#{$level}-font-weight);
  $line-height: _a(#{$level}-line-height);
  $font-family: _a(#{$level}-font-family);

  @include mixShortHand($font-size, $font-weight, $line-height, $font-family);
  letter-spacing: _a(#{$level}-letter-spacing);
}
