$pi_const: 3.141592654;

@function pow($number, $exponent) {
  @if (round($exponent) != $exponent) {
    @return exp($exponent * ln($number));
  }

  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
     $value: $value * $number;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: $value / $number;
    }
  }

  @return $value;
}

@function factorial($value) {
  $result: 1;

  @if $value == 0 {
    @return $result;
  }

  @for $index from 1 through $value {
    $result: $result * $index;
  }

  @return $result;
}

@function summation($iteratee, $input, $initial: 0, $limit: 100) {
  $sum: 0;

  @for $index from $initial to $limit {
    $sum: $sum + call(get-function($iteratee), $input, $index);
  }

  @return $sum;
}

@function exp-maclaurin($x, $n) {
  @return (pow($x, $n) / factorial($n));
}

@function exp($value) {
  @return summation('exp-maclaurin', $value, 0, 100);
}

@function ln-maclaurin($x, $n) {
  @return (pow(-1, $n + 1) / $n) * (pow($x - 1, $n));
}

@function ln($value) {
  $ten-exp: 1;
  $ln-ten: 2.30258509;

  @while ($value > pow(10, $ten-exp)) {
    $ten-exp: $ten-exp + 1;
  }

  @return summation(ln-maclaurin, $value / pow(10, $ten-exp), 1, 100) + $ten-exp * $ln-ten;
}

/// #### Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

/// #### Convert degris to radians
/// @param {Number} $deg - angle in degris
/// @return {Number} radians
@function degris2rad($deg) {
  @return $deg / 180 * $pi_const;
}

@function sin-maclaurin($x, $n) {
  @return pow(-1, $n) * (pow($x, 2 * $n + 1) / factorial(2 * $n + 1));
}

/// #### Calculate sine function by Taylor series
/// @param {Number} $value - angle in radians
/// @return {Number} result of sine function
@function sin-rad($value) {
  @return summation('sin-maclaurin', $value, 0, 100);
}

/// #### Calculate sin function by calling sin-rad function
/// @param {Number} $deg - angel in degris
/// @return {Number} result of sine function
@function sin($deg) {
  @return sin-rad(
    degris2rad(
      strip-unit($deg)
    )
  );
}

@function cos-maclaurin($x, $n) {
  @return pow(-1, $n) * (pow($x, 2 * $n) / factorial(2 * $n));
}

/// #### Calculate cosine function by Taylor series
/// @param {Number} $value - angel in radians
/// @return {Number} result of cosine function
@function cos-rad($value) {
  @return 1 + summation('cos-maclaurin', $value, 1, 100);
}

/// #### Calculate cos function by calling cos-rad function
/// @param {Number} $deg - angel in degris
/// @return {Number} result of sine function
@function cos($deg) {
  @return cos-rad(
    degris2rad(
      strip-unit($deg)
    )
  );
}

/// #### Return percentage representation from fractional number
/// @param {Number} $number - fractional number
/// @return {String} result with percent symbol
@function percentage($number) {
  @return $number * 100%;
}

@function round-precision($value, $precision) {
  $precision_order: pow(10, $precision);
  @return round($value * $precision_order) / $precision_order;
}
